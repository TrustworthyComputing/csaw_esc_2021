#!/usr/bin/env python3
from pytransform import pyarmor_runtime

# Obfuscated code was generated with PyArmor 6.6.2 Trial
# Should work with any version of PyArmor >= 6.6.2 (tested with 6.8.1 Trial)

pyarmor_runtime()
__pyarmor__(__name__, __file__, b'\x50\x59\x41\x52\x4d\x4f\x52\x00\x00\x03\x08\x00\x55\x0d\x0d\x0a\x06\x29\xa0\x01\x00\x00\x00\x00\x01\x00\x00\x00\x40\x00\x00\x00\x8c\x04\x00\x00\x00\x00\x00\x08\x3c\x22\x72\x61\xd1\x24\xa3\x47\xe9\x24\xb9\xa4\x14\xb4\x28\xf5\x00\x00\x00\x00\x00\x00\x00\x00\xa9\x03\x2c\x08\xec\xef\xb0\xe9\x95\x6a\x79\x5f\xa5\xd5\x37\xcd\x56\xd7\x8c\x3b\xff\xac\x75\xfb\x69\xed\x8d\xa2\xa2\x51\x24\xaa\xbd\x69\x48\x44\x0f\x6b\x51\x7e\x64\xbd\x52\x2d\x91\xe9\x46\xd9\xe4\x88\xab\x8f\xe5\x64\x96\xbb\xb8\x94\x56\xb5\xe5\xf3\xa7\x64\xad\x0f\xaf\x5f\x87\x99\xc4\x49\x47\x13\x73\x46\x66\x6a\x40\x15\x1d\x64\xbf\xae\xee\xe4\x1e\xaf\x9e\x22\xa5\x43\x12\xe9\x89\x52\xb3\xd6\x11\x47\x6d\xa6\x24\xbd\xb4\xc7\xcf\xb4\x31\x5e\x73\x78\xe0\x0f\x36\x6e\x85\xc7\x58\xd3\x11\xf5\x47\x96\xe2\xd7\x7e\x81\xb6\x90\x54\x09\xad\xad\xc3\xa8\x5b\x52\xf0\x09\x5c\x23\xfc\xb5\x3e\x77\x4e\x13\x9f\xcc\x36\xe0\xdd\x03\x07\x44\x50\x0c\xde\xb2\xdb\x77\x8d\x46\x1f\x8e\x8a\x7a\x59\x49\xdc\xf4\x94\x1b\xa6\x6d\x6c\xce\x75\x3b\xd6\x4a\x0c\x53\x55\xfe\xe0\x38\xa4\xc8\x7b\x7f\x62\x86\x52\xa5\xbd\x11\x40\x8b\x85\x5d\xf3\x75\xaa\x28\xd3\xd0\x2c\x92\x6b\x4c\xc7\x2d\x07\x4c\xe4\xa4\x3f\x11\x81\x48\x6c\xe4\x09\x15\xfa\x1b\x86\xef\xf9\x15\x85\x6a\xd9\xb2\xb6\x36\xcb\xea\xd7\x9a\x0e\x71\x4f\xdf\xcb\x68\xf3\xe0\x7a\x85\x0d\xc6\xa2\x08\x8b\x37\xab\x24\x38\x07\x0c\x31\x1c\xb9\x0a\xf2\xfc\x7d\x33\xcd\xb9\x45\x75\x4e\xef\x26\x14\x7a\xde\xda\xdb\x08\xd6\x81\x73\xa0\x13\x48\x0a\x4a\x71\x43\x4d\xcb\x4b\x3d\xdc\x48\x21\xad\x45\xc4\xcf\xe6\xbf\xed\x5c\x21\xb9\xcd\xb5\x5c\x88\x68\xf7\x6f\xdc\x69\xc4\x1c\xea\x9e\x71\xf0\xa8\x21\x17\x53\x53\xdd\xb2\x18\xc2\x6e\xbb\x21\x26\x1c\xa4\x4f\x2c\xc2\x94\x34\x5b\x70\x66\xe8\xb1\x91\xf9\x0f\x4a\xd7\xfc\x15\xa9\x06\xf6\xf9\x09\x0b\x7a\x95\xa3\x3a\x26\x9c\xf1\x22\xa4\x13\x2e\x66\x9b\xe0\xfd\x62\xfa\x2b\x2e\x29\xa0\xc7\xbd\x73\x38\x38\x01\x2c\x78\x16\x63\x38\xf8\x27\x7e\x1c\x4d\x17\xc9\x5a\x4d\x0e\x08\xad\xc5\xca\x16\x8f\x2c\x65\x89\x52\xb0\x7e\xa0\xef\x49\x41\x0c\xd5\x62\xb8\xa9\x8d\xc9\x65\x39\x09\xe4\x26\x5f\x74\xc2\x38\xc2\x81\xba\x26\x1d\xf8\x46\xea\xaf\x22\xd2\xaf\x4c\x2a\x67\x28\xaa\xd0\xe0\x27\x30\x9a\x79\xb5\x8f\x9d\xbe\x0b\x48\x35\x9f\x5c\x32\x55\x87\xff\x3b\xfb\xd9\xec\x69\x94\xe9\x75\x61\x5d\x11\x33\x4a\x50\x76\x11\x0c\xe2\x62\x6f\x50\x3e\x5b\x44\x25\xf8\x02\xc1\xcd\x4e\x43\xa3\xbe\xdb\x1d\xbe\x8d\xa0\x21\x94\x27\xd0\x32\xc1\x69\xc0\x6c\x36\x25\xea\xeb\x55\x30\x95\xcc\x03\x14\x28\x6d\x30\xd7\x11\xde\x85\x6c\x4f\x65\x60\x4e\x6b\x86\x32\x42\x96\x9d\xab\x57\xed\x5e\xae\x3b\x5d\xbf\xe9\x8c\x37\xf9\xdf\xcf\xdc\xe6\x6f\xb7\x9d\x2f\x71\x67\xd2\x09\x57\xa2\xdd\x27\x2a\xa3\x84\x91\x01\x09\xcb\xac\x0f\x8b\x32\xc3\x4e\x1b\x0c\xae\x99\x2d\x1e\x39\x0d\x49\x3c\x90\x5f\x37\x99\x4a\x47\xcf\xcf\x40\xd3\xeb\xbc\xa9\x9f\x2e\x1c\x6e\x59\x5a\x47\xf1\xf6\xf3\xec\x22\x3b\xce\xaa\x6c\x97\x0d\x0f\xd6\xb4\xc4\x04\x58\x34\x60\x55\xee\x87\x62\x28\x24\x68\x1b\xef\xae\xef\xcf\xa4\x30\x67\xcc\x84\xfb\x90\xb1\xbe\x6d\x35\x1f\x56\x56\xfa\x0c\xae\x67\x22\xeb\x4e\x0a\x76\xc5\x2a\xc9\x23\x80\xcb\x5a\x08\xc5\xe2\xde\xf6\x59\x12\x91\xc3\x9d\x39\x26\xbc\x5a\x13\x93\xde\x6d\x01\xbd\x13\x7f\x10\x6c\x36\xd6\x4c\xda\x65\xa0\x45\x60\x3d\x73\x6a\x99\x4a\x7d\x52\x61\xe6\x66\x4a\xa4\xee\xd2\x5e\x8e\x1b\x47\xf8\x74\x8b\xf3\xf1\x3c\xb2\x3d\x54\x1c\x37\x4c\x78\x16\x57\xc0\x0b\xfc\x23\xa5\xe2\x1d\x87\xcc\x1b\x86\x9b\x42\xd5\x2d\x7c\x43\x76\x20\x6d\x24\x36\x39\xcc\x60\x9a\xfc\xb7\x2f\xcf\x60\x5c\xb0\xb6\x38\x37\x11\x9e\x61\x7d\x5c\xc7\xa1\x5f\x18\x1b\x12\xcb\x41\x10\xcc\xae\x02\x8f\xec\x8d\x21\x1f\x11\x2e\x57\x0e\xfd\xd5\x49\x27\x6b\x72\x2f\xd9\xbb\xb6\x07\x62\x8d\x71\xf1\x72\xfd\x2a\xf5\xad\x78\xcb\xdf\xdd\x93\x23\x88\xcc\xc5\x47\xad\xce\x88\xab\x7b\x7e\xe0\x88\x71\xee\xf8\x01\xb6\x2b\x03\x8d\xb3\x50\x06\x32\x14\xa5\xc5\x05\x38\x77\x39\xcf\x76\xb0\x08\x8b\x81\xab\x39\x7d\x6a\xa3\x9a\x91\x19\xcd\x87\x44\x06\x24\x26\xed\x0a\x2f\x8e\x45\xdc\xdd\x1e\x44\x07\x2e\x91\xcc\x76\xf2\xf6\xb7\xce\x11\x97\x6f\xe7\x39\xa6\xe3\x06\xb0\x9a\xf1\x3a\x55\xbe\xcc\x6c\xba\x2c\x2e\x13\xbb\xd4\xaa\xb5\x30\xd3\x43\xc7\xf5\xab\x47\x71\xf5\xfc\xde\xb5\x06\x45\x91\x86\xbc\xdb\x23\x9c\x87\x69\xd6\xdf\x82\x69\x79\x37\xe7\xed\xf1\x27\x1f\xdf\xb6\x43\x53\xb3\xae\x81\x23\xbe\x23\x01\x6d\xaf\x3a\x3a\xe4\x50\x05\x6b\x8f\x59\xc1\x67\x7a\xf2\x7c\x80\x66\x5a\x7d\x51\x87\xce\x0a\x06\x16\x3f\x9b\x6e\x9c\x08\x36\x7d\x41\xb1\xd1\x4f\x59\xc2\x77\xfe\x4f\x24\x63\x3e\x46\x77\x2b\x9c\xef\x7f\xeb\x32\x56\xd7\x7e\x87\x2e\x11\x92\x6e\xea\x03\x7c\xd6\x22\xcb\xc2\xa5\xa5\x67\xfa\x11\x36\x2c\x3f\x55\x68\x2c\xb2\x07\xb7\xeb\x06\xb5\x2f\xd2\xe5\x4f\x98\x7f\xe6\x8f\xdd\xac\xe1\x72\x32\xc4\xb1\x60\xc6\x60\x20\x72\x62\x8e\xbc\x58\xa9\x6b\xb3\x5a\xbf\x45\x9d\x71\x17\xcf\x02\x24\x06\x8d\x74\xf2\xd3\x66\x1e\x41\x2f\xa3\x35\x82\x86\x4c\x3e\xe1\xac\x80\x61\xff\x10\x42\xaf\xef\xd4\x26\x62\xd8\x7d\x09\xb1\x63\x6f\x58\x80\xee\x78\xce\x37\x63\x6b\x98\x55\x40\xd3\xce\x43\x4a\xf6\x56\xa9\x22\xa9\x3c\xf9\x0c\x4e\xa8\x90\xc7\x2e\x1a\xec\x74\x73\xdc\x80\x09\x1a\x73\x69\x13\x9c', 2)

def main():
    user_input = [4,0,0,0]
    scope = cw.scope()
    target = cw.target(scope, cw.targets.SimpleSerial)
    scope.default_setup()
    cw.program_target(scope, cw.programmers.STM32FProgrammer, CHALLENGE_PATH)

    # gen_signature (the obfuscated function) will upload the hex file, and use
    # the board as a coprocessor to compute the signature of user_input
    sig = gen_signature(target, user_input)
    print("Signature:", sig)

main()
